{"version":3,"sources":["webpack:///./src/pages/authorize/github.jsx","webpack:///./src/utils/querystring.js"],"names":["connect","state","me","global","dispatch","updateMe","_ref","_React$useState","React","useState","undefined","success","setSuccess","useEffect","isBrowser","qs","querystring","window","location","search","code","fetch","process","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","ok","json","Error","statusText","user","path","navigate","catch","e","console","error","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_11__","css","_ref2","_components_Helmet__WEBPACK_IMPORTED_MODULE_6__","title","description","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","_ref3","_components_Logo__WEBPACK_IMPORTED_MODULE_7__","width","_ref4","react_icons_fi__WEBPACK_IMPORTED_MODULE_5__","_ref5","name","login","_ref6","onClick","reload","parse","_step","_iterator","_createForOfIteratorHelperLoose","replace","split","done","data","value"],"mappings":"0gBA8FeA,sBACX,SAAAC,GAAK,MAAK,CAAEC,GAAID,EAAME,OAAOD,KAC7B,SAAAE,GAAQ,MAAK,CAAEC,SAAU,SAACH,GAAD,OAAQE,EAASC,YAASH,OAFxCF,CAnFQ,SAAAM,GAAsB,IAAnBJ,EAAmBI,EAAnBJ,GAAIG,EAAeC,EAAfD,SAAeE,EACTC,IAAMC,cAASC,GAAvCC,EADiCJ,EAAA,GACxBK,EADwBL,EAAA,GA2CzC,OAxCAC,IAAMK,UAAU,WACZ,GAAKC,cAAL,CAEA,IAAMC,EAAKC,IAAkBC,OAAOC,SAASC,QAEzCJ,EAAGK,KACHH,OAAOI,MAAMC,4CAAuC,CAChDC,OAAQ,OACRC,QAAS,CACLC,OAAU,mBACVC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBT,KAAML,EAAGK,SAEdU,KAAK,SAAAC,GACJ,GAAIA,EAAIC,GAAI,OAAOD,EAAIE,OACvB,MAAM,IAAIC,MAAMH,EAAII,cACrBL,KAAK,SAAAM,GACJxB,GAAW,GACXP,EAAS+B,GAELrB,EAAGsB,KACHC,YAASvB,EAAGsB,MAEZC,YAAS,cAEdC,MAAM,SAACC,GACNC,QAAQC,MAAMF,GACd5B,GAAW,KAGXG,EAAGsB,KACHC,YAAS,mBAAqBvB,EAAGsB,MAEjCC,YAAS,gBAGlB,CAAEjC,IAGDsC,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAGC,GAGJH,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CACIC,MAAM,uBACNC,YAAY,kDAEhBN,OAAAC,EAAA,EAAAD,CAACO,EAAA,EAAD,CACIC,GAAG,IACHN,IAAGO,GASHT,OAAAC,EAAA,EAAAD,CAACU,EAAA,EAAD,CAAMC,MAAM,UAEhBX,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAGU,GAIJZ,OAAAC,EAAA,EAAAD,CAACa,EAAA,EAAD,CAAUX,IAAGY,IACbd,OAAAC,EAAA,EAAAD,CAAA,YAEoB,IAAZhC,EACIgC,OAAAC,EAAA,EAAAD,CAAA,6BAAsBzC,EAAKA,EAAGwD,MAAQxD,EAAGyD,MAAQ,GAAjD,iBACY,IAAZhD,EACIgC,OAAAC,EAAA,EAAAD,CAAA,6BAAoBA,OAAAC,EAAA,EAAAD,CAAA,QAAME,IAAGe,EAAyBC,QAAU,kBAAM/C,cAAcG,OAAOC,SAAS4C,SAAW,KAA3F,eACpBnB,OAAAC,EAAA,EAAAD,CAAA,i/BCtFzB,IAAMoB,EAAQ,SAAC5C,GAKlB,IADA,IACA6C,EADMjD,EAAK,GACXkD,EAAAC,EAHA/C,GADAA,EAASA,EAAOgD,QAAQ,MAAO,KACfC,MAAM,QAGtBJ,EAAAC,KAAAI,MAA0B,KAClBC,EADkBN,EAAAO,MACLH,MAAM,KACvBrD,EAAGuD,EAAK,IAAMA,EAAK,GAGvB,OAAOvD","file":"component---src-pages-authorize-github-jsx-998eaf1047630f1ba8b4.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, navigate } from \"gatsby\";\nimport { FiGithub } from \"react-icons/fi\";\n\nimport Helmet from \"../../components/Helmet\";\nimport Logo from \"../../components/Logo\";\nimport { updateMe } from \"../../state/global\";\nimport isBrowser from \"../../utils/isBrowser\";\nimport * as querystring from \"../../utils/querystring\";\n\nconst GitHubAuthPage = ({ me, updateMe }) => {\n    const [ success, setSuccess ] = React.useState(undefined);\n\n    React.useEffect(() => {\n        if (!isBrowser()) return;\n\n        const qs = querystring.parse(window.location.search);\n\n        if (qs.code) {\n            window.fetch(process.env.API_URL + \"/login/github\", {\n                method: \"POST\",\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    code: qs.code,\n                }),\n            }).then(res => {\n                if (res.ok) return res.json();\n                throw new Error(res.statusText);\n            }).then(user => {\n                setSuccess(true);\n                updateMe(user);\n\n                if (qs.path) {\n                    navigate(qs.path);\n                } else {\n                    navigate(\"/account\");\n                }\n            }).catch((e) => {\n                console.error(e);\n                setSuccess(false);\n            });\n        } else {\n            if (qs.path) {\n                navigate(\"/authorize?path=\" + qs.path);\n            } else {\n                navigate(\"/authorize\");\n            }\n        }\n    }, [ updateMe ]);\n\n    return (\n        <div css={{\n            textAlign: \"center\",\n        }}>\n            <Helmet\n                title=\"Authorize via GitHub\"\n                description=\"Login to Glee, via GitHub, to start using it.\"\n            />\n            <Link\n                to=\"/\"\n                css={{\n                    height: 42,\n                    marginBottom: 25,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    width: \"100%\",\n                }}\n            >\n                <Logo width=\"100%\" />\n            </Link>\n            <div css={{\n                display: \"flex\",\n                alignItems: \"center\",\n            }}>\n                <FiGithub css={{ marginRight: 10 }} />\n                <div>\n                    {\n                        success === true\n                        ?   <span>Authenticated { me ? me.name || me.login : \"\" } with GitHub</span>\n                        :   success === false\n                            ?   <span>Unauthorized. <span css={{ cursor: \"pointer\" }} onClick={ () => isBrowser() ? window.location.reload() : {} }>Try again?</span></span>\n                            :   <span>Authenticating with GitHub...</span>\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(\n    state => ({ me: state.global.me }),\n    dispatch => ({ updateMe: (me) => dispatch(updateMe(me)) }),\n)(GitHubAuthPage);\n","export const parse = (search) => {\n    search = search.replace(/^\\?/, \"\");\n    search = search.split(\"&\");\n\n    const qs = {};\n    for (let field of search) {\n        let data = field.split(\"=\");\n        qs[data[0]] = data[1];\n    }\n\n    return qs;\n};\n"],"sourceRoot":""}